table(airquality$Month)
boxplot(Ozone~Month, data = airquality)
boxplot(Ozone~Month, data = airquality, xlab = "Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab = "red")
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, airquality$Month == 5)
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, pch = 17, col = "blue")
points(may$Wind, may$Ozone, col = "blue", pch = 17)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col = "red", pch = 8)
legend("topright", pch = c(17, 8), col = c("blue", "red"), legend = c("May", "Other Months"))
abline(v = mean(airquality$Wind), lty = 2, lwd = 2)
abline(v = median(airquality$Wind), lty = 2, lwd = 2)
par(mfrow = c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(set = "lm")
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point(color = "pink", size = 4, alpha = 1/2)
g+geom_point(size = 4, alpha = 1/2, aes = drv)
g+geom_point(size = 4, alpha = 1/2, aes = "drv")
g+geom_point(size = 4, alpha = 1/2, aes(drv))
g+geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(aes(color = drv))+labs(title = "Swirl Rules!")+labs(x = "Displacement", y = "Hwy Mileage")
g+geom_point(size = 2, alpha = 1/2, aes(color = drv))+geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testdat, aes(x=myx, y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g <- ggplot(mpg, aes(x=displ, y=hwy, color = factor(year)))
g+geom_point()
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")+labs(x="Displacement", y="Highway", title="Swirl Rules!")
g+geom_point()+facet_grid(drv~cyl, margins = TRUE)+geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")+labs(x="Displacement", y="Highway Mileage", title="Swirl Rules!")
q()
q()
library(swirl)
rm(list=ls())
swirl()
install_course("Getting_and_Cleaning_Data")
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, col = sex_class, into = c("sex", "class"))
submit()
students3
submit()
submit()
submit()
?spread
submit()
library(readr)
parse_number("class1")
parse_number("class5")
parse_numeric("class5")
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?contains
submit()
submit()
submit()
source('/var/folders/fq/bjn8wqrj3b738fvl6tn3wlqh0000gn/T//RtmpZNj26O/script9.R')
tdsat <- source('/var/folders/fq/bjn8wqrj3b738fvl6tn3wlqh0000gn/T//RtmpZNj26O/script9.R')
tdsat
rm(tdsat)
source('/var/folders/fq/bjn8wqrj3b738fvl6tn3wlqh0000gn/T//RtmpZNj26O/script9.R')
new_sat
View(new_sat)
as.factors(new_sat$sex)
swirl()
bye()
q()
q()
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minute = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, now())
this_moment <- update(this_moment,hours = 9, minutes = 19)
this_moment
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours  =17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
>interval
?interval
how_long <- interval(start = last_time, end = arrive)
how_long
as.period(how_long)
stopwatch()
q()
install.packages(c("curl", "digest", "icd", "irlba", "jsonlite", "knitr", "R6", "Rcpp", "stringdist", "stringr"))
install.packages(c("foreign", "lattice", "Matrix", "mgcv", "nlme", "survival"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
q()
swirl()
library(swirl)
swirl()
0
bye()
swirl()
swirl()
bye()
install.packages("h5")
install.packages("h5")
install.packages("h5")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
fileName = '/Users/babburi/Documents/Classroom/DataScience/LIGO_datasets/H-H1_LOSC_4_V1-815411200-4096.hdf5'
fileName
ligo <- h5read(file = fileName, name = 'meta')
ligo[[1]]
ligo[[2]]
ligo
ligo <- h5read(file = fileName, name = 'meta[GPSstart]')
ligo <- h5read(file = fileName, name = 'meta[5]')
ligo
ligodq <- h5read(file = fileName, name = 'quality')
ligodq[[1]]
ligodq[[2]]
ligodq
ligodq <- ligodq$simple
class(ligodq)
ligodq$DQDescriptions
ligodq$DQShortnames
meta <- h5read(file = fileName, name = 'meta')
fileName = '/Users/babburi/Documents/Classroom/DataScience/LIGO_datasets/H-H1_LOSC_4_V1-815411200-4096.hdf5'
meta <- h5read(file = fileName, name = 'meta')
dq <- h5read(file = fileName, name = 'quality')
gpsStart <- meta$GPSstart
bitNameList <- dq$simple$DQShortnames
bitNameList
nbits <- length(bitNameList)
nbits
1:nbits
range(nbits)
seq(nbits)
gpsStart
for (i in seq(nbits)) {
print(bit, bitNameList[i])
}
for (i in seq(nbits)) {
print(i, bitNameList[i])
}
class(bitNameList)
bitNameList[1]
for (i in seq(nbits)) {
i
bitNameList[i]
}
for (i in seq(nbits)) {
print(c(i, bitNameList[i]),na.print = 'NA')
}
for (i in seq(nbits)) {
print(c(i, bitNameList[i]),na.print = 'NA', right = T)
}
for (i in seq(nbits)) {
print(c(i, bitNameList[i]),na.print = 'NA')
}
qmask <- dq$simple$DQmask
class(qmask)
qmask[1:5]
sci <- bitwAnd(bitwShiftR(qmask, 0), 1)
sci
bitwShiftL(qmask[1], 0)
bitwShiftL(qmask[1], 1)
bitwAnd(65535,1)
bitwAnd(65535, 0)
bitwAnd(65535, 3)
bitwShiftL(qmask[1], 9)
bitwAnd(33553920, 1)
burst1 <- bitwAnd(bitwShiftR(qmask, 9), 1)
burst1[1:5]
burst1
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
burst1 <- bitwAnd(bitwShiftR(qmask, 1:9), 1)
bitwShiftR(65535, 1:9)
bitwShiftR(65535, 1)
bitwShiftR(65535, 2)
bitwShiftR(65535, 9)
bitwAnd(127, 1)
bitwAnd(127, 2)
bitwAnd(127, 3)
bitwAnd(127, 4)
bitwAnd(127, 127)
bitwAnd(127, 1000)
bitwAnd(127, 10)
bitwAnd(127, 11)
bitwAnd(127, 12)
bitwAnd(127, 100)
bitwAnd(127, 1000)
bitwAnd(127, 10000)
bitwAnd(127, 100000)
goodData_1hz <- bitwAnd(sci, burst1)
goodData_1hz
plot(goodData_1hz, main = 'Good Data')
plot(goodData_1hz, type = 'l', main = 'Good Data')
plot(goodData_1hz + 4, type = 'l', main = 'Good Data')
lines(burst1 + 2)
lines(sci)
plot(sci)
points(burst1 + 2)
plot(sci, ylim = c(0,5))
plot(sci, ylim = c(0,5), type = 'l')
lines(burst1+2)
lines(goodData_1hz + 4)
plot(sci, type = 'l', xlab = 'Time (s)', ylim = c(0, 8), col = 'red')
lines(burst1, col = 'green')
plot(sci, type = 'l', xlab = 'Time (s)', ylim = c(0, 8), col = 'red')
lines(burst1 + 2, col = 'green')
lines(goodData_1hz + 4, col = 'blue')
legend(legend = c('DATA', 'BURST_CAT1', 'GOOD_DATA'), col = c('red', 'green', 'blue'))
legend('topright', legend = c('DATA', 'BURST_CAT1', 'GOOD_DATA'), col = c('red', 'green', 'blue'))
legend('topright', legend = c('DATA', 'BURST_CAT1', 'GOOD_DATA'), text.col = c('red', 'green', 'blue') )
length(goodData_1hz)
dim(goodData_1hz)
msk <- goodData_1hz != 1
tail(msk)
msk
mski <- msk == TRUE
rm(mski)
mski <- which(msk, arr.ind = TRUE)
rm(msk)
rm(mski)
text.col = c('red', 'green', 'blue'), label = 'Legend' )
text.col = c('red', 'green', 'blue'))
legend('topright', legend = c('DATA', 'BURST_CAT1', 'GOOD_DATA'),
text.col = c('red', 'green', 'blue'))
legend('topright', legend = c('DATA', 'BURST_CAT1', 'GOOD_DATA'),
text.col = c('red', 'green', 'blue'), label = 'Legend')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
q()
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
h5read(file, read.attributes = T)
meta
strain <- h5read(file, name = 'strain')
H5close()
strain <- h5read(file, name = 'strain')
class(strain)
head(strain$Strain)
strain[[1]]
names(strain)
names(strain$Strain)
dim(strain)
dim(strain$Strain)
strain$Strain[1] - strain$Strain[2]
strain$Strain[2] - strain$Strain[3]
meta
length(strain)
length(strain$Strain)
seq_along(1:10, 20)
seq_len(1:10, 20)
?seq_along
?seq_len
seq(1:10, 20)
seq(1:10)
seq(1:5, length.out = 10)
seq(from = 1, to  = 5, length.out = 10)
time <- seq(from = gpsStart, to = gpsEnd, length.out = length(strain$Strain))
gpsEnd <- gpsStart + meta$Duration
time <- seq(from = gpsStart, to = gpsEnd, length.out = length(strain$Strain))
length(time)
length(strain$Strain)
head(time)
time[10000:10010]
num = 10000
plot(x = time[1:num], y = strain$Strain[1:num], type = 'l',
xlab = 'GPS Time (s)', ylab = 'H1 Strain')
plot(x = time[1:num], y = strain$Strain[1:num], type = 'l',
xlab = 'GPS Time (s)', ylab = 'H1 Strain', col = 'blue')
num <- 100000
plot(x = time[1:num], y = strain$Strain[1:num], type = 'l',
xlab = 'GPS Time (s)', ylab = 'H1 Strain', col = 'blue')
num <- 1000000
plot(x = time[1:num], y = strain$Strain[1:num], type = 'l',
xlab = 'GPS Time (s)', ylab = 'H1 Strain', col = 'blue')
num <- 10000
plot(x = time[1:num], y = strain$Strain[1:num], type = 'l',
xlab = 'GPS Time (s)', ylab = 'H1 Strain', col = 'blue')
plot(x = time[1:num], y = strain$Strain[1:num], type = 'l',
xlab = 'GPS Time (s)', ylab = 'H1 Strain', col = 'red')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
par()
par('mfrow')
library(ggplot2)
qplot(time[1:num], strain$Strain[1:num])
qplot(time[1:num], strain$Strain[1:num], size = 1)
qplot(time[1:num], strain$Strain[1:num], size = 0.1)
qplot(time[1:num], strain$Strain[1:num])
library(lattice)
xyplot(time[1:num], strain$Strain[1:num])
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
?legend
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
plot(sci, type = 'l', xlab = 'Time (s)', ylim = c(0, 8), col = 'red')
lines(burst1 + 2, col = 'green')
lines(goodData_1hz + 4, col = 'blue')
legend('topright', legend = c('Good Data', 'BURST_CAT1', 'DATA'),
text.col = c('blue', 'green', 'red'), yjust = 0, xjust = 1)
legend('topright', legend = c('Good Data', 'BURST_CAT1', 'DATA'),
text.col = c('blue', 'green', 'red'), xjust = 1)
legend('topright', legend = c('Good Data', 'BURST_CAT1', 'DATA'),
text.col = c('blue', 'green', 'red'), xjust = 0)
plot(sci, type = 'l', xlab = 'Time (s)', ylim = c(0, 8), col = 'red')
lines(burst1 + 2, col = 'green')
lines(goodData_1hz + 4, col = 'blue')
legend('topright', legend = c('Good Data', 'BURST_CAT1', 'DATA'),
text.col = c('blue', 'green', 'red'), xjust = 0)
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
plot(sci, type = 'l', xlab = 'Time (s)', ylim = c(0, 8), col = 'red')
lines(burst1 + 2, col = 'green')
lines(goodData_1hz + 4, col = 'blue')
legend('topright', legend = c('Good Data', 'BURST_CAT1', 'DATA'),
text.col = c('blue', 'green', 'red'))
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
source('~/Documents/Projects/ligo/ligo_data_analysis.R')
16777216/4096
exp(-1/500)
exp(-2/500)
exp(-20/500)
exp(-365/500)
exp(-720/500)
exp(-7200/500)
exp(-3650/500)
q()
library(swirl)
swirl()
q()
update.packages()
x <- rnorm(n = 100, mean = 0, sd)
x <- rnorm(n = 100, mean = 0, sd=1)
hist(x)
shapiro.test(X)
shapiro.test(x)
x <- rnorm(n = 1000, mean = 0, sd=1)
hist(x)
shapiro.test(x)
rm(x)
setwd("~/Documents/Projects/Fraud Detection")
X <- read.csv(file = "creditcard.csv", header = T)
Xgood <- X[X$Class == 0, -c(1,30)]
Xbad <- X[X$Class == 1, -c(1,30)]
table(sample(Xgood, size = 1, replace = F), sample(Xbad, size = 1, replace = T))
sample(Xgood, size = 1, replace = F)
Xgood[sample(nrow(Xgood), size = 1, replace = F),]
table(Xgood[sample(nrow(Xgood), size = 1, replace = F),], Xbad[sample(nrow(Xbad), size = 1, replace = T),])
Xgood[sample(nrow(Xgood), size = 1, replace = F),]
Xbad[sample(nrow(Xbad), size = 1, replace = T),]
Xgood[sample(nrow(Xgood), size = 1, replace = F),]
Xbad[sample(nrow(Xbad), size = 1, replace = T),]
g <- nrow(Xgood); b <- nrow(Xbad)
rg <- sample(1:g, g, replace = F)
rb <- sample(1:b, b, replace = F)
Xtrain <- data.matrix(Xgood[rg[1:(g*0.6)],])
mu <- apply(Xtrain[,-29], 2, mean)       # mean of all features
sigma <- cov(Xtrain[,-29])               # covariance matrix of all features
dmvnorm(Xgood[180702,-29], mu, sigma)
library(mvtnorm)
dmvnorm(Xgood[180702,-29], mu, sigma)
dmvnorm(Xbad[150698,-29], mu, sigma)
Xbad[150698,-29]
rownames(Xbad)
Xbad[14,-29]
Xbad[314,-29]
dmvnorm(Xbad[314,-29], mu, sigma)
dmvnorm(Xgood[1,-29], mu, sigma)
dmvnorm(Xbad[1,-29], mu, sigma)
Xbad[1,-29]
Xgood[1,-29]
Xbad[2,-29]
pbad <- dmvnorm(Xbad[,-29], mu, sigma)
pbad
summary(pbad)
hist(pbad)
sum(pbad==0)
dmvnorm(Xbad[4,-29], mu, sigma)
Xbad[4,-29]
pgood <- dmvnorm(Xgood[,-29], mu, sigma)
summary(pgood)
sum(pgood==0)
hist(pgood)
hist(pgood, xim = c(0,0.001))
hist(pgood, xlim = c(0,0.001))
hist(pgood, xlim = c(0,0.001))
hist(pgood, xlim = c(0,0.01))
hist(pgood, xlim = c(0,0.1))
hist(pgood, xlim = c(0,1))
hist(pgood, xlim = c(0,0.00000001))
hist(pgood, xlim = c(0,0.000000000001))
hist(pgood, xlim = c(0,0.0000000001))
hist(pgood, xlim = c(0,0.00000000001))
hist(pgood, xlim = c(0,0.00000000001), breaks = 200)
hist(Xbad$V1)
hist(Xbad$V2)
hist(Xbad$V3)
hist(Xbad$V4)
hist(Xbad$V5)
hist(Xbad$V1)
Xbad1 <- Xbad + 100
hist(Xbad1$V1)
hist(Xbad1$V2)
hist(Xbad1$V4)
pbad1 <- dmvnorm(Xbad1[,-29], mu, sigma)
pbad1
